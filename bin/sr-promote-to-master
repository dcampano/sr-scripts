#!/usr/bin/env ruby

require 'rubygems'
require 'fog'
require 'mysql'
require 'optparse'

options = {}

optparse = OptionParser.new do|opts|
  opts.on( '--current-master-id INSTANCE_ID', 'AWS Instance Id Of Current Master Machine') do |o|
    options[:current_master_id] = o
  end
  opts.on( '--new-master-id INSTANCE_ID', 'AWS Instance Id Of Machine To Promote To Master') do |o|
    options[:new_master_id] = o
  end
  opts.on( '--mysql-user USER', 'Mysql User') do |o|
    options[:mysql_user] = o
  end
  opts.on( '--mysql-pass PASSWORD', 'Mysql Password') do |o|
    options[:mysql_password] = o
  end
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!

if(options[:current_master_id] == nil || options[:new_master_id] == nil)
	p "Must specify --current-master-id AND --new-master-id"
	exit
end

connection = Fog::Compute.new(:provider => "AWS", :region => "us-west-1")

def kill_mysql_connections(db)
	results = db.query "SHOW PROCESSLIST"
	results.each_hash do |row|
		unless row["User"] == "system user" || row["Command"] == 'Binlog Dump' || row["Info"] == "SHOW PROCESSLIST"
			puts row["Id"]
			db.query "KILL #{row['Id']};"
		end
	end
end

def get_private_ip(fog, instance_id)
	return fog.servers.get(instance_id).private_ip_address
end

mysql_user = options[:mysql_user]
mysql_pass = options[:mysql_password]

current_master_ip = get_private_ip(connection, options[:current_master_id])
new_master_ip = get_private_ip(connection, options[:new_master_id])

current_master = Mysql.new(current_master_ip, mysql_user, mysql_pass)
new_master = Mysql.new(new_master_ip, mysql_user, mysql_pass)

current_master.query("SET GLOBAL read_only = 1")
sleep 1 # HACKY CRAP
kill_mysql_connections current_master 
new_master.query("STOP SLAVE;")
new_master.query("SET GLOBAL read_only = 0")




