#!/usr/bin/env ruby

require 'rubygems'
require 'fog'
require 'mysql'
require 'ostruct'

connection = Fog::Compute.new(:provider => "AWS", :region => "us-west-1")
sdb = Fog::AWS::SimpleDB.new()

# somewhere up here check to see if the devices are already attached

p connection.snapshots.all.first

if ARGV.length != 1
	p "Must specify an instance id"
	exit
end

instance_id = ARGV[0] 

records = sdb.select("SELECT * FROM db_recovery_info WHERE instance_id = '#{instance_id}' AND timestamp > '1' ORDER BY timestamp DESC LIMIT 5").body["Items"]

p records

rows = []
records.each_value do |r|
	r.each do |k,v|
		r[k] = v[0]
	end
	data = OpenStruct.new(r)
	rows.push data
end

rows.sort! { |a,b| b.timestamp <=> a.timestamp }

latest_snapshots = nil
rows.each do |r|
	if latest_snapshots != nil
		break
	end
	pending = false
	r.snapshots.split(",").each do |snap|
		if connection.snapshots.get(snap).state == "pending"
			pending = true
		end
			
	end
	if pending == false
		latest_snapshots = r.snapshots.split(",")
	end
	
end

#latest_snapshots now equals the snapshot ids
p latest_snapshots

def get_latest_snapshot(snapshots, instance_id)
        filtered_snap = snapshots.find_all { |s| s.tags["instance_id"] == instance_id }
        latest_snap = filtered_snap.sort { |a,b| b.created_at <=> a.created_at }.first unless filtered_snap.length == 0
        return latest_snap
end

snapshot = get_latest_snapshot(connection.snapshots.all, instance_id)

p snapshot

# USE THE TAGS in snapshot to call CHANGE MASTER TO

current_master = connection.servers.get(instance_id)

# VALIDATE THAT NUMBER OF SNAPSHOTS EQUALS NUMBER OF MYSQL DISKS

master_disks = current_master.tags["mysql_disks"].split(":")

if latest_snapshots.length != master_disks.length
	p "EXITING: Number of Snapshots != Number of Disks"
	exit
end

p current_master
# need to find out the current node that this is running on
#
#
current_instance_id = `curl http://169.254.169.254/latest/meta-data/instance-id`
current_instance = connection.servers.get(current_instance_id)

latest_snapshots.each_index |index| do
	snapshot_id = latest_snapshots[index]
	current_disk = master_disks[index]
	
	snapshot = connection.snapshots.get(snapshot_id)

	vol = connection.volumes.new(:snapshot_id => snapshot_id, :availability_zone => current_instance.availability_zone, :size => snapshot.volume_size)
	vol.device = current_disk 
	vol.server = current_instance
	vol.save
	p vol

	until vol.state == "in-use" do
		sleep 1
		vol.reload
	end
end

exit

sleep 15

# NEED TO FIND OUT IF NUMBER OF DISKS IS GREATER THAN 1, IF SO, THEN use mdadm to create an array and mount, if not, then just mount

`mkdir /mnt/mysql`
`mount -t xfs /dev/sdk /mnt/mysql`
`service mysql start`

#`mysql -e "CHANGE MASTER TO MASTER_HOST='#{current_master.private_ip_address}', MASTER_LOG_FILE='binarylogs.006693', MASTER_LOG_POS=785268118;"`
# start mysql, connect to mysql and issue change master and start slave commands
